{"created_by":"Tampermonkey","version":"1","scripts":[{"name":"[VOT] - Voice Over Translation","options":{"check_for_updates":true,"user_modified":null,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"run_in":null,"tags":[],"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["*://*.youtube.com/*","*://*.youtube-nocookie.com/*","*://*.youtubekids.com/*","*://*.twitch.tv/*","*://*.xvideos.com/*","*://*.xvideos-ar.com/*","*://*.xvideos005.com/*","*://*.xv-ru.com/*","*://*.pornhub.com/*","*://*.pornhub.org/*","*://*.vk.com/*","*://*.vkvideo.ru/*","*://*.vk.ru/*","*://*.vimeo.com/*","*://*.imdb.com/*","*://*.9gag.com/*","*://*.twitter.com/*","*://*.x.com/*","*://*.facebook.com/*","*://*.rutube.ru/*","*://*.bilibili.com/*","*://my.mail.ru/*","*://*.bitchute.com/*","*://*.coursera.org/*","*://*.udemy.com/course/*","*://*.tiktok.com/*","*://*.douyin.com/*","*://rumble.com/*","*://*.eporner.com/*","*://*.dailymotion.com/*","*://*.ok.ru/*","*://trovo.live/*","*://disk.yandex.ru/*","*://disk.yandex.kz/*","*://disk.yandex.com/*","*://disk.yandex.com.am/*","*://disk.yandex.com.ge/*","*://disk.yandex.com.tr/*","*://disk.yandex.by/*","*://disk.yandex.az/*","*://disk.yandex.co.il/*","*://disk.yandex.ee/*","*://disk.yandex.lt/*","*://disk.yandex.lv/*","*://disk.yandex.md/*","*://disk.yandex.net/*","*://disk.yandex.tj/*","*://disk.yandex.tm/*","*://disk.yandex.uz/*","*://youtube.googleapis.com/embed/*","*://*.banned.video/*","*://*.madmaxworld.tv/*","*://*.weverse.io/*","*://*.newgrounds.com/*","*://*.egghead.io/*","*://*.youku.com/*","*://*.archive.org/*","*://*.patreon.com/*","*://*.reddit.com/*","*://*.kodik.info/*","*://*.kodik.biz/*","*://*.kodik.cc/*","*://*.kick.com/*","*://developer.apple.com/*","*://dev.epicgames.com/*","*://*.rapid-cloud.co/*","*://odysee.com/*","*://learning.sap.com/*","*://*.watchporn.to/*","*://*.linkedin.com/*","*://*.incestflix.net/*","*://*.incestflix.to/*","*://*.porntn.com/*","*://*.dzen.ru/*","*://*.cloudflarestream.com/*","*://*.loom.com/*","*://*.artstation.com/learning/*","*://*.rt.com/*","*://*.bitview.net/*","*://*.kickstarter.com/*","*://*.thisvid.com/*","*://*.ign.com/*","*://*.bunkr.site/*","*://*.bunkr.black/*","*://*.bunkr.cat/*","*://*.bunkr.media/*","*://*.bunkr.red/*","*://*.bunkr.ws/*","*://*.bunkr.org/*","*://*.bunkr.sk/*","*://*.bunkr.si/*","*://*.bunkr.su/*","*://*.bunkr.ci/*","*://*.bunkr.cr/*","*://*.bunkr.fi/*","*://*.bunkr.ph/*","*://*.bunkr.pk/*","*://*.bunkr.ps/*","*://*.bunkr.ru/*","*://*.bunkr.la/*","*://*.bunkr.is/*","*://*.bunkr.to/*","*://*.bunkr.ac/*","*://*.bunkr.ax/*","*://web.telegram.org/k/*","*://t2mc.toil.cc/*","*://mylearn.oracle.com/*","*://learn.deeplearning.ai/*","*://learn-staging.deeplearning.ai/*","*://learn-dev.deeplearning.ai/*","*://*.netacad.com/content/i2cs/*","*://*/*.mp4*","*://*/*.webm*","*://*.yewtu.be/*","*://yt.artemislena.eu/*","*://invidious.flokinet.to/*","*://iv.melmac.space/*","*://inv.nadeko.net/*","*://inv.tux.pizza/*","*://invidious.private.coffee/*","*://yt.drgnz.club/*","*://vid.puffyan.us/*","*://invidious.dhusch.de/*","*://*.piped.video/*","*://piped.tokhmi.xyz/*","*://piped.moomoo.me/*","*://piped.syncpundit.io/*","*://piped.mha.fi/*","*://watch.whatever.social/*","*://piped.garudalinux.org/*","*://efy.piped.pages.dev/*","*://watch.leptons.xyz/*","*://piped.lunar.icu/*","*://yt.dc09.ru/*","*://piped.mint.lgbt/*","*://*.il.ax/*","*://piped.privacy.com.de/*","*://piped.esmailelbob.xyz/*","*://piped.projectsegfau.lt/*","*://piped.in.projectsegfau.lt/*","*://piped.us.projectsegfau.lt/*","*://piped.privacydev.net/*","*://piped.palveluntarjoaja.eu/*","*://piped.smnz.de/*","*://piped.adminforge.de/*","*://piped.qdi.fi/*","*://piped.hostux.net/*","*://piped.chauvet.pro/*","*://piped.jotoma.de/*","*://piped.pfcd.me/*","*://piped.frontendfriendly.xyz/*","*://proxitok.pabloferreiro.es/*","*://proxitok.pussthecat.org/*","*://tok.habedieeh.re/*","*://proxitok.esmailelbob.xyz/*","*://proxitok.privacydev.net/*","*://tok.artemislena.eu/*","*://tok.adminforge.de/*","*://tt.vern.cc/*","*://cringe.whatever.social/*","*://proxitok.lunar.icu/*","*://proxitok.privacy.com.de/*","*://peertube.1312.media/*","*://tube.shanti.cafe/*","*://*.bee-tube.fr/*","*://video.sadmin.io/*","*://*.dalek.zone/*","*://review.peertube.biz/*","*://*.peervideo.club/*","*://tube.la-dina.net/*","*://peertube.tmp.rcp.tf/*","*://*.peertube.su/*","*://video.blender.org/*","*://videos.viorsan.com/*","*://tube-sciences-technologies.apps.education.fr/*","*://tube-numerique-educatif.apps.education.fr/*","*://tube-arts-lettres-sciences-humaines.apps.education.fr/*","*://*.beetoons.tv/*","*://comics.peertube.biz/*","*://*.makertube.net/*","*://*.poketube.fun/*","*://pt.sudovanilla.org/*","*://poke.ggtyler.dev/*","*://poke.uk2.littlekai.co.uk/*","*://poke.blahai.gay/*","*://*.ricktube.ru/*","*://*.coursehunter.net/*","*://*.coursetrain.net/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":["file://*/*.mp4*","file://*/*.webm*","*://accounts.youtube.com/*"],"merge_excludes":true,"use_connects":[],"orig_connects":["yandex.ru","disk.yandex.kz","disk.yandex.com","disk.yandex.com.am","disk.yandex.com.ge","disk.yandex.com.tr","disk.yandex.by","disk.yandex.az","disk.yandex.co.il","disk.yandex.ee","disk.yandex.lt","disk.yandex.lv","disk.yandex.md","disk.yandex.net","disk.yandex.tj","disk.yandex.tm","disk.yandex.uz","yandex.net","timeweb.cloud","raw.githubusercontent.com","vimeo.com","toil.cc","deno.dev","onrender.com","workers.dev","speed.cloudflare.com","porntn.com","googlevideo.com"],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_run_in":[],"orig_noframes":null,"orig_tags":[]}},"storage":{"ts":1758148918453,"data":{"locale-phrases":"s{\n  \"recommended\": \"рекомендуется\",\n  \"translateVideo\": \"Перевести видео\",\n  \"disableTranslate\": \"Отключить\",\n  \"translationSettings\": \"Настройки перевода\",\n  \"subtitlesSettings\": \"Настройки субтитров\",\n  \"resetSettings\": \"Сбросить настройки\",\n  \"videoBeingTranslated\": \"Видео переводится\",\n  \"videoLanguage\": \"Язык видео\",\n  \"translationLanguage\": \"Язык перевода\",\n  \"translationTake\": \"Перевод займёт\",\n  \"translationTakeMoreThanHour\": \"Перевод займёт больше часа\",\n  \"translationTakeAboutMinute\": \"Перевод займёт около минуты\",\n  \"translationTakeFewMinutes\": \"Перевод займёт несколько минут\",\n  \"translationTakeApproximatelyMinutes\": \"Перевод займёт примерно {0} минут\",\n  \"translationTakeApproximatelyMinute\": \"Перевод займёт примерно {0} минуты\",\n  \"requestTranslationFailed\": \"Не удалось запросить перевод видео\",\n  \"audioNotReceived\": \"Не получена ссылка на аудио\",\n  \"audioFormatNotSupported\": \"Формат аудио не поддерживается\",\n  \"VOTAutoTranslate\": \"Переводить при открытии\",\n  \"VOTDontTranslateYourLang\": \"Не переводить с родного языка\",\n  \"VOTVolume\": \"Громкость видео:\",\n  \"VOTVolumeTranslation\": \"Громкость перевода:\",\n  \"VOTAutoSetVolume\": \"Уменьшать громкость видео до\",\n  \"VOTShowVideoSlider\": \"Ползунок громкости видео\",\n  \"VOTSyncVolume\": \"Связать громкость перевода и видео\",\n  \"VOTDisableFromYourLang\": \"Вы отключили перевод видео на вашем языке\",\n  \"VOTVideoIsTooLong\": \"Видео слишком длинное\",\n  \"VOTNoVideoIDFound\": \"Не найден идентификатор (ID) видео\",\n  \"VOTSubtitles\": \"Субтитры\",\n  \"VOTSubtitlesDisabled\": \"Отключены\",\n  \"VOTSubtitlesMaxLength\": \"Максимальная длина субтитров\",\n  \"VOTHighlightWords\": \"Подсвечивать слова\",\n  \"VOTTranslatedFrom\": \"переведено с\",\n  \"VOTAutogenerated\": \"создано автоматически\",\n  \"VOTSettings\": \"Настройки VOT\",\n  \"VOTMenuLanguage\": \"Язык меню\",\n  \"VOTAuthors\": \"Авторы\",\n  \"VOTVersion\": \"Версия\",\n  \"VOTLoader\": \"Загрузчик\",\n  \"VOTBrowser\": \"Браузер\",\n  \"VOTShowPiPButton\": \"Показывать кнопку «Картинка в картинке»\",\n  \"langs\": {\n    \"auto\": \"Авто\",\n    \"az\": \"Азербайджанский\",\n    \"ay\": \"Аймара\",\n    \"ak\": \"Акан\",\n    \"sq\": \"Албанский\",\n    \"am\": \"Амхарский\",\n    \"en\": \"Английский\",\n    \"ar\": \"Арабский\",\n    \"hy\": \"Армянский\",\n    \"as\": \"Ассамский\",\n    \"af\": \"Африкаанс\",\n    \"eu\": \"Баскский\",\n    \"be\": \"Белорусский\",\n    \"bn\": \"Бенгальский\",\n    \"my\": \"Бирманский\",\n    \"bg\": \"Болгарский\",\n    \"bs\": \"Боснийский\",\n    \"bho\": \"Бходжпури\",\n    \"cy\": \"Валлийский\",\n    \"hu\": \"Венгерский\",\n    \"vi\": \"Вьетнамский\",\n    \"haw\": \"Гавайский\",\n    \"ht\": \"Гаитянский\",\n    \"gl\": \"Галисийский\",\n    \"lg\": \"Ганда\",\n    \"el\": \"Греческий\",\n    \"ka\": \"Грузинский\",\n    \"gn\": \"Гуарани\",\n    \"gu\": \"Гуджарати\",\n    \"gd\": \"Гэльский\",\n    \"da\": \"Датский\",\n    \"fy\": \"Западнофризский\",\n    \"zu\": \"Зулу\",\n    \"iw\": \"Иврит\",\n    \"ig\": \"Игбо\",\n    \"yi\": \"Идиш\",\n    \"id\": \"Индонезийский\",\n    \"ga\": \"Ирландский\",\n    \"is\": \"Исландский\",\n    \"es\": \"Испанский\",\n    \"it\": \"Итальянский\",\n    \"yo\": \"Йоруба\",\n    \"kk\": \"Казахский\",\n    \"kn\": \"Каннада\",\n    \"ca\": \"Каталанский\",\n    \"qu\": \"Кечуа\",\n    \"rw\": \"Киньяруанда\",\n    \"ky\": \"Киргизский\",\n    \"zh\": \"Китайский\",\n    \"zh-Hant\": \"Китайский (традиционный)\",\n    \"zh-Hans\": \"Китайский (упрощённый)\",\n    \"ko\": \"Корейский\",\n    \"co\": \"Корсиканский\",\n    \"xh\": \"Коса\",\n    \"ku\": \"Курдский\",\n    \"km\": \"Кхмерский\",\n    \"lo\": \"Лаосский\",\n    \"la\": \"Латинский\",\n    \"lv\": \"Латышский\",\n    \"ln\": \"Лингала\",\n    \"lt\": \"Литовский\",\n    \"lb\": \"Люксембургский\",\n    \"mk\": \"Македонский\",\n    \"mg\": \"Малагасийский\",\n    \"ms\": \"Малайский\",\n    \"ml\": \"Малаялам\",\n    \"dv\": \"Мальдивский\",\n    \"mt\": \"Мальтийский\",\n    \"mi\": \"Маори\",\n    \"mr\": \"Маратхи\",\n    \"mn\": \"Монгольский\",\n    \"de\": \"Немецкий\",\n    \"ne\": \"Непальский\",\n    \"nl\": \"Нидерландский\",\n    \"no\": \"Норвежский\",\n    \"ny\": \"Ньянджа\",\n    \"or\": \"Ория\",\n    \"om\": \"Оромо\",\n    \"pa\": \"Панджаби\",\n    \"fa\": \"Персидский\",\n    \"pl\": \"Польский\",\n    \"pt\": \"Португальский\",\n    \"ps\": \"Пушту\",\n    \"ro\": \"Румынский\",\n    \"ru\": \"Русский\",\n    \"sm\": \"Самоанский\",\n    \"sa\": \"Санскрит\",\n    \"ceb\": \"Себуано\",\n    \"nso\": \"Северный Сото\",\n    \"sr\": \"Сербский\",\n    \"si\": \"Сингальский\",\n    \"sd\": \"Синдхи\",\n    \"sk\": \"Словацкий\",\n    \"sl\": \"Словенский\",\n    \"so\": \"Сомали\",\n    \"sw\": \"Суахили\",\n    \"su\": \"Сунданский\",\n    \"tg\": \"Таджикский\",\n    \"th\": \"Тайский\",\n    \"ta\": \"Тамильский\",\n    \"tt\": \"Татарский\",\n    \"te\": \"Телугу\",\n    \"ti\": \"Тигринья\",\n    \"ts\": \"Тсонга\",\n    \"tr\": \"Турецкий\",\n    \"tk\": \"Туркменский\",\n    \"uz\": \"Узбекский\",\n    \"ug\": \"Уйгурский\",\n    \"uk\": \"Украинский\",\n    \"ur\": \"Урду\",\n    \"fil\": \"Филиппинский\",\n    \"fi\": \"Финский\",\n    \"fr\": \"Французский\",\n    \"ha\": \"Хауса\",\n    \"hi\": \"Хинди\",\n    \"hmn\": \"Хмонг\",\n    \"hr\": \"Хорватский\",\n    \"cs\": \"Чешский\",\n    \"sv\": \"Шведский\",\n    \"sn\": \"Шона\",\n    \"ee\": \"Эве\",\n    \"eo\": \"Эсперанто\",\n    \"et\": \"Эстонский\",\n    \"st\": \"Южный Сото\",\n    \"jv\": \"Яванский\",\n    \"ja\": \"Японский\",\n    \"kri\": \"Кри\"\n  },\n  \"streamNoConnectionToServer\": \"Нет подключения к серверу\",\n  \"searchField\": \"Поиск...\",\n  \"VOTTranslateAPIErrors\": \"Переводить ошибки из API\",\n  \"VOTDetectService\": \"Сервис определения языка\",\n  \"VOTProxyWorkerHost\": \"Введите адрес worker прокси-сервера\",\n  \"VOTM3u8ProxyHost\": \"Введите адрес m3u8 прокси-сервера\",\n  \"proxySettings\": \"Настройки прокси-сервера\",\n  \"translationTakeApproximatelyMinute2\": \"Перевод займёт примерно {0} минуту\",\n  \"VOTAudioBooster\": \"Расширенное увеличение громкости перевода\",\n  \"VOTSubtitlesDesign\": \"Оформление субтитров\",\n  \"VOTSubtitlesFontSize\": \"Размер шрифта субтитров\",\n  \"VOTSubtitlesOpacity\": \"Прозрачность фона субтитров\",\n  \"VOTSubtitlesDownloadFormat\": \"Формат для загрузки субтитров\",\n  \"VOTDownloadWithName\": \"Загружать файлы с названием видео\",\n  \"VOTUpdateLocaleFiles\": \"Обновить файлы локализации\",\n  \"VOTLocaleHash\": \"Хеш перевода\",\n  \"VOTUpdatedAt\": \"Обновлено в\",\n  \"VOTNeedWebAudioAPI\": \"Чтобы включить, у вас должен быть Web Audio API\",\n  \"VOTMediaCSPEnabledOnSite\": \"На этом сайте включен Media CSP\",\n  \"VOTOnlyBypassMediaCSP\": \"Использовать только для обхода Media CSP\",\n  \"VOTNewAudioPlayer\": \"Использовать новый аудиоплеер\",\n  \"VOTUseNewModel\": \"Использовать экспериментальный вариант голосов Yandex для некоторых видеороликов\",\n  \"TranslationDelayed\": \"Перевод немного задерживается\",\n  \"VOTTranslationCompletedNotify\": \"Перевод на {0} завершен!\",\n  \"VOTSendNotifyOnComplete\": \"Отправлять уведомление о том, что видео было переведено\",\n  \"VOTBugReport\": \"Сообщить об ошибке\",\n  \"VOTTranslateProxyDisabled\": \"Отключено\",\n  \"VOTTranslateProxyEnabled\": \"Включено\",\n  \"VOTTranslateProxyEverything\": \"Проксировать всё\",\n  \"VOTTranslateProxyStatus\": \"Режим проксирования\",\n  \"VOTTranslatedBy\": \"Переведено {0}\",\n  \"VOTStreamNotAvailable\": \"Трансляция перевода недоступна\",\n  \"VOTTranslationTextService\": \"Сервис перевода текста\",\n  \"VOTNotAffectToVoice\": \"Не влияет на перевод текста при озвучивании\",\n  \"DontTranslateSelectedLanguages\": \"Не переводите с выбранных языков\",\n  \"showVideoVolumeSlider\": \"Отображать ползунок громкости видео\",\n  \"hotkeysSettings\": \"Настройки горячих клавиш\",\n  \"None\": \"Нет\",\n  \"VOTUseLivelyVoice\": \"Использовать живые голоса. Будто все знают русский.\",\n  \"miscSettings\": \"Другие настройки\",\n  \"services\": {\n    \"yandexbrowser\": \"Яндекс Браузер\",\n    \"msedge\": \"Microsoft Edge\",\n    \"rust-server\": \"Сервер на Rust\"\n  },\n  \"aboutExtension\": \"О расширении\",\n  \"appearance\": \"Внешний вид\",\n  \"buttonPositionInWidePlayer\": \"Положение кнопки в широком плеере\",\n  \"position\": {\n    \"left\": \"Слева\",\n    \"right\": \"Справа\",\n    \"top\": \"Сверху\",\n    \"default\": \"По умолчанию\"\n  },\n  \"secs\": \"сек.\",\n  \"autoHideButtonDelay\": \"Задержка перед скрытием кнопки перевода\",\n  \"notFound\": \"не найдено\",\n  \"minButtonPositionContainer\": \"Положение кнопки меняется только на проигрывателях размером более 600 пикселей.\",\n  \"VOTTranslateProxyStatusDefault\": \"Полное отключение проксирования в вашей стране может привести к поломке расширения\",\n  \"PressTheKeyCombination\": \"Нажмите комбинацию клавиш...\",\n  \"VOTUseAudioDownload\": \"Использовать загрузку аудио\",\n  \"VOTUseAudioDownloadWarning\": \"Отключение загрузки аудио может нарушить работоспособность расширения\",\n  \"VOTAccountRequired\": \"Вам необходимо авторизоваться, чтобы использовать эту функцию\",\n  \"VOTMyAccount\": \"Мой аккаунт\",\n  \"VOTLogin\": \"Авторизоваться\",\n  \"VOTLogout\": \"Выйти\",\n  \"VOTRefresh\": \"Обновить\",\n  \"VOTYandexToken\": \"Введите OAuth-токен Яндекса\",\n  \"VOTYandexTokenInfo\": \"Вы можете вручную указать токен учетной записи в этом поле. Пожалуйста, обратите внимание, что мы не проверяем его действительность перед отправкой запроса на перевод\",\n  \"VOTLoginViaToken\": \"Войти с помощью токена\"\n}\n","locale-version":"n2","responseLanguage":"sru","locale-updated-at":"n1755940992","locale-hash":"s21d7399a32dbe8ab6125f6a10be6304f","localeUpdatedAt":"n1758148918","localePhrases":"s{\n  \"recommended\": \"рекомендуется\",\n  \"translateVideo\": \"Перевести видео\",\n  \"disableTranslate\": \"Отключить\",\n  \"translationSettings\": \"Настройки перевода\",\n  \"subtitlesSettings\": \"Настройки субтитров\",\n  \"resetSettings\": \"Сбросить настройки\",\n  \"videoBeingTranslated\": \"Видео переводится\",\n  \"videoLanguage\": \"Язык видео\",\n  \"translationLanguage\": \"Язык перевода\",\n  \"translationTake\": \"Перевод займёт\",\n  \"translationTakeMoreThanHour\": \"Перевод займёт больше часа\",\n  \"translationTakeAboutMinute\": \"Перевод займёт около минуты\",\n  \"translationTakeFewMinutes\": \"Перевод займёт несколько минут\",\n  \"translationTakeApproximatelyMinutes\": \"Перевод займёт примерно {0} минут\",\n  \"translationTakeApproximatelyMinute\": \"Перевод займёт примерно {0} минуты\",\n  \"requestTranslationFailed\": \"Не удалось запросить перевод видео\",\n  \"audioNotReceived\": \"Не получена ссылка на аудио\",\n  \"audioFormatNotSupported\": \"Формат аудио не поддерживается\",\n  \"VOTAutoTranslate\": \"Переводить при открытии\",\n  \"VOTDontTranslateYourLang\": \"Не переводить с родного языка\",\n  \"VOTVolume\": \"Громкость видео:\",\n  \"VOTVolumeTranslation\": \"Громкость перевода:\",\n  \"VOTAutoSetVolume\": \"Уменьшать громкость видео до\",\n  \"VOTShowVideoSlider\": \"Ползунок громкости видео\",\n  \"VOTSyncVolume\": \"Связать громкость перевода и видео\",\n  \"VOTDisableFromYourLang\": \"Вы отключили перевод видео на вашем языке\",\n  \"VOTVideoIsTooLong\": \"Видео слишком длинное\",\n  \"VOTNoVideoIDFound\": \"Не найден идентификатор (ID) видео\",\n  \"VOTSubtitles\": \"Субтитры\",\n  \"VOTSubtitlesDisabled\": \"Отключены\",\n  \"VOTSubtitlesMaxLength\": \"Максимальная длина субтитров\",\n  \"VOTHighlightWords\": \"Подсвечивать слова\",\n  \"VOTTranslatedFrom\": \"переведено с\",\n  \"VOTAutogenerated\": \"создано автоматически\",\n  \"VOTSettings\": \"Настройки VOT\",\n  \"VOTMenuLanguage\": \"Язык меню\",\n  \"VOTAuthors\": \"Авторы\",\n  \"VOTVersion\": \"Версия\",\n  \"VOTLoader\": \"Загрузчик\",\n  \"VOTBrowser\": \"Браузер\",\n  \"VOTShowPiPButton\": \"Показывать кнопку «Картинка в картинке»\",\n  \"langs\": {\n    \"auto\": \"Авто\",\n    \"az\": \"Азербайджанский\",\n    \"ay\": \"Аймара\",\n    \"ak\": \"Акан\",\n    \"sq\": \"Албанский\",\n    \"am\": \"Амхарский\",\n    \"en\": \"Английский\",\n    \"ar\": \"Арабский\",\n    \"hy\": \"Армянский\",\n    \"as\": \"Ассамский\",\n    \"af\": \"Африкаанс\",\n    \"eu\": \"Баскский\",\n    \"be\": \"Белорусский\",\n    \"bn\": \"Бенгальский\",\n    \"my\": \"Бирманский\",\n    \"bg\": \"Болгарский\",\n    \"bs\": \"Боснийский\",\n    \"bho\": \"Бходжпури\",\n    \"cy\": \"Валлийский\",\n    \"hu\": \"Венгерский\",\n    \"vi\": \"Вьетнамский\",\n    \"haw\": \"Гавайский\",\n    \"ht\": \"Гаитянский\",\n    \"gl\": \"Галисийский\",\n    \"lg\": \"Ганда\",\n    \"el\": \"Греческий\",\n    \"ka\": \"Грузинский\",\n    \"gn\": \"Гуарани\",\n    \"gu\": \"Гуджарати\",\n    \"gd\": \"Гэльский\",\n    \"da\": \"Датский\",\n    \"fy\": \"Западнофризский\",\n    \"zu\": \"Зулу\",\n    \"iw\": \"Иврит\",\n    \"ig\": \"Игбо\",\n    \"yi\": \"Идиш\",\n    \"id\": \"Индонезийский\",\n    \"ga\": \"Ирландский\",\n    \"is\": \"Исландский\",\n    \"es\": \"Испанский\",\n    \"it\": \"Итальянский\",\n    \"yo\": \"Йоруба\",\n    \"kk\": \"Казахский\",\n    \"kn\": \"Каннада\",\n    \"ca\": \"Каталанский\",\n    \"qu\": \"Кечуа\",\n    \"rw\": \"Киньяруанда\",\n    \"ky\": \"Киргизский\",\n    \"zh\": \"Китайский\",\n    \"zh-Hant\": \"Китайский (традиционный)\",\n    \"zh-Hans\": \"Китайский (упрощённый)\",\n    \"ko\": \"Корейский\",\n    \"co\": \"Корсиканский\",\n    \"xh\": \"Коса\",\n    \"ku\": \"Курдский\",\n    \"km\": \"Кхмерский\",\n    \"lo\": \"Лаосский\",\n    \"la\": \"Латинский\",\n    \"lv\": \"Латышский\",\n    \"ln\": \"Лингала\",\n    \"lt\": \"Литовский\",\n    \"lb\": \"Люксембургский\",\n    \"mk\": \"Македонский\",\n    \"mg\": \"Малагасийский\",\n    \"ms\": \"Малайский\",\n    \"ml\": \"Малаялам\",\n    \"dv\": \"Мальдивский\",\n    \"mt\": \"Мальтийский\",\n    \"mi\": \"Маори\",\n    \"mr\": \"Маратхи\",\n    \"mn\": \"Монгольский\",\n    \"de\": \"Немецкий\",\n    \"ne\": \"Непальский\",\n    \"nl\": \"Нидерландский\",\n    \"no\": \"Норвежский\",\n    \"ny\": \"Ньянджа\",\n    \"or\": \"Ория\",\n    \"om\": \"Оромо\",\n    \"pa\": \"Панджаби\",\n    \"fa\": \"Персидский\",\n    \"pl\": \"Польский\",\n    \"pt\": \"Португальский\",\n    \"ps\": \"Пушту\",\n    \"ro\": \"Румынский\",\n    \"ru\": \"Русский\",\n    \"sm\": \"Самоанский\",\n    \"sa\": \"Санскрит\",\n    \"ceb\": \"Себуано\",\n    \"nso\": \"Северный Сото\",\n    \"sr\": \"Сербский\",\n    \"si\": \"Сингальский\",\n    \"sd\": \"Синдхи\",\n    \"sk\": \"Словацкий\",\n    \"sl\": \"Словенский\",\n    \"so\": \"Сомали\",\n    \"sw\": \"Суахили\",\n    \"su\": \"Сунданский\",\n    \"tg\": \"Таджикский\",\n    \"th\": \"Тайский\",\n    \"ta\": \"Тамильский\",\n    \"tt\": \"Татарский\",\n    \"te\": \"Телугу\",\n    \"ti\": \"Тигринья\",\n    \"ts\": \"Тсонга\",\n    \"tr\": \"Турецкий\",\n    \"tk\": \"Туркменский\",\n    \"uz\": \"Узбекский\",\n    \"ug\": \"Уйгурский\",\n    \"uk\": \"Украинский\",\n    \"ur\": \"Урду\",\n    \"fil\": \"Филиппинский\",\n    \"fi\": \"Финский\",\n    \"fr\": \"Французский\",\n    \"ha\": \"Хауса\",\n    \"hi\": \"Хинди\",\n    \"hmn\": \"Хмонг\",\n    \"hr\": \"Хорватский\",\n    \"cs\": \"Чешский\",\n    \"sv\": \"Шведский\",\n    \"sn\": \"Шона\",\n    \"ee\": \"Эве\",\n    \"eo\": \"Эсперанто\",\n    \"et\": \"Эстонский\",\n    \"st\": \"Южный Сото\",\n    \"jv\": \"Яванский\",\n    \"ja\": \"Японский\",\n    \"kri\": \"Кри\"\n  },\n  \"streamNoConnectionToServer\": \"Нет подключения к серверу\",\n  \"searchField\": \"Поиск...\",\n  \"VOTTranslateAPIErrors\": \"Переводить ошибки из API\",\n  \"VOTDetectService\": \"Сервис определения языка\",\n  \"VOTProxyWorkerHost\": \"Введите адрес worker прокси-сервера\",\n  \"VOTM3u8ProxyHost\": \"Введите адрес m3u8 прокси-сервера\",\n  \"proxySettings\": \"Настройки прокси-сервера\",\n  \"translationTakeApproximatelyMinute2\": \"Перевод займёт примерно {0} минуту\",\n  \"VOTAudioBooster\": \"Расширенное увеличение громкости перевода\",\n  \"VOTSubtitlesDesign\": \"Оформление субтитров\",\n  \"VOTSubtitlesFontSize\": \"Размер шрифта субтитров\",\n  \"VOTSubtitlesOpacity\": \"Прозрачность фона субтитров\",\n  \"VOTSubtitlesDownloadFormat\": \"Формат для загрузки субтитров\",\n  \"VOTDownloadWithName\": \"Загружать файлы с названием видео\",\n  \"VOTUpdateLocaleFiles\": \"Обновить файлы локализации\",\n  \"VOTLocaleHash\": \"Хеш перевода\",\n  \"VOTUpdatedAt\": \"Обновлено в\",\n  \"VOTNeedWebAudioAPI\": \"Чтобы включить, у вас должен быть Web Audio API\",\n  \"VOTMediaCSPEnabledOnSite\": \"На этом сайте включен Media CSP\",\n  \"VOTOnlyBypassMediaCSP\": \"Использовать только для обхода Media CSP\",\n  \"VOTNewAudioPlayer\": \"Использовать новый аудиоплеер\",\n  \"VOTUseNewModel\": \"Использовать экспериментальный вариант голосов Yandex для некоторых видеороликов\",\n  \"TranslationDelayed\": \"Перевод немного задерживается\",\n  \"VOTTranslationCompletedNotify\": \"Перевод на {0} завершен!\",\n  \"VOTSendNotifyOnComplete\": \"Отправлять уведомление о том, что видео было переведено\",\n  \"VOTBugReport\": \"Сообщить об ошибке\",\n  \"VOTTranslateProxyDisabled\": \"Отключено\",\n  \"VOTTranslateProxyEnabled\": \"Включено\",\n  \"VOTTranslateProxyEverything\": \"Проксировать всё\",\n  \"VOTTranslateProxyStatus\": \"Режим проксирования\",\n  \"VOTTranslatedBy\": \"Переведено {0}\",\n  \"VOTStreamNotAvailable\": \"Трансляция перевода недоступна\",\n  \"VOTTranslationTextService\": \"Сервис перевода текста\",\n  \"VOTNotAffectToVoice\": \"Не влияет на перевод текста при озвучивании\",\n  \"DontTranslateSelectedLanguages\": \"Не переводите с выбранных языков\",\n  \"showVideoVolumeSlider\": \"Отображать ползунок громкости видео\",\n  \"hotkeysSettings\": \"Настройки горячих клавиш\",\n  \"None\": \"Нет\",\n  \"VOTUseLivelyVoice\": \"Использовать живые голоса. Будто все знают русский.\",\n  \"miscSettings\": \"Другие настройки\",\n  \"services\": {\n    \"yandexbrowser\": \"Яндекс Браузер\",\n    \"msedge\": \"Microsoft Edge\",\n    \"rust-server\": \"Сервер на Rust\"\n  },\n  \"aboutExtension\": \"О расширении\",\n  \"appearance\": \"Внешний вид\",\n  \"buttonPositionInWidePlayer\": \"Положение кнопки в широком плеере\",\n  \"position\": {\n    \"left\": \"Слева\",\n    \"right\": \"Справа\",\n    \"top\": \"Сверху\",\n    \"default\": \"По умолчанию\"\n  },\n  \"secs\": \"сек.\",\n  \"autoHideButtonDelay\": \"Задержка перед скрытием кнопки перевода\",\n  \"notFound\": \"не найдено\",\n  \"minButtonPositionContainer\": \"Положение кнопки меняется только на проигрывателях размером более 600 пикселей.\",\n  \"VOTTranslateProxyStatusDefault\": \"Полное отключение проксирования в вашей стране может привести к поломке расширения\",\n  \"PressTheKeyCombination\": \"Нажмите комбинацию клавиш...\",\n  \"VOTUseAudioDownload\": \"Использовать загрузку аудио\",\n  \"VOTUseAudioDownloadWarning\": \"Отключение загрузки аудио может нарушить работоспособность расширения\",\n  \"VOTAccountRequired\": \"Вам необходимо авторизоваться, чтобы использовать эту функцию\",\n  \"VOTMyAccount\": \"Мой аккаунт\",\n  \"VOTLogin\": \"Авторизоваться\",\n  \"VOTLogout\": \"Выйти\",\n  \"VOTRefresh\": \"Обновить\",\n  \"VOTYandexToken\": \"Введите OAuth-токен Яндекса\",\n  \"VOTYandexTokenInfo\": \"Вы можете вручную указать токен учетной записи в этом поле. Пожалуйста, обратите внимание, что мы не проверяем его действительность перед отправкой запроса на перевод\",\n  \"VOTLoginViaToken\": \"Войти с помощью токена\"\n}\n","localeHash":"s21d7399a32dbe8ab6125f6a10be6304f","localeLang":"sru","compatVersion":"s2025-05-09"}},"enabled":true,"position":1,"file_url":"https://raw.githubusercontent.com/ilyhalight/voice-over-translation/master/dist/vot.user.js","uuid":"dfa04394-8f47-4e19-9ff0-17226ad8dc69","source":"","requires":[{"meta":{"name":"hls.light.min.js","url":"https://cdnjs.cloudflare.com/ajax/libs/hls.js/1.5.18/hls.light.min.js","ts":1755945990726,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"gm-addstyle-polyfill.js","url":"https://gist.githubusercontent.com/ilyhalight/6eb5bb4dffc7ca9e3c57d6933e2452f3/raw/7ab38af2228d0bed13912e503bc8a9ee4b11828d/gm-addstyle-polyfill.js","ts":1755945990727,"mimetype":"text/javascript"},"source":"aWYgKHR5cGVvZiBHTV9hZGRTdHlsZSA9PSAndW5kZWZpbmVkJykgewogIHRoaXMuR01fYWRkU3R5bGUgPSAoYUNzcykgPT4gewogICAgJ3VzZSBzdHJpY3QnOwogICAgbGV0IGhlYWQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdOwogICAgaWYgKGhlYWQpIHsKICAgICAgbGV0IHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTsKICAgICAgc3R5bGUuc2V0QXR0cmlidXRlKCd0eXBlJywgJ3RleHQvY3NzJyk7CiAgICAgIHN0eWxlLnRleHRDb250ZW50ID0gYUNzczsKICAgICAgaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7CiAgICAgIHJldHVybiBzdHlsZTsKICAgIH0KICAgIHJldHVybiBudWxsOwogIH07Cn0="}]},{"name":"More Speed Buttons on YouTube","options":{"check_for_updates":true,"user_modified":null,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"run_in":null,"tags":[],"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["*://*.youtube.com/*","*://youtube.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_run_in":[],"orig_noframes":null,"orig_tags":[]}},"storage":{"ts":1758126519702,"data":{}},"enabled":true,"position":2,"file_url":"https://update.greasyfork.org/scripts/549838/More%20Speed%20Buttons%20on%20YouTube.user.js","uuid":"aac8b572-73a4-485d-a1aa-6c0f81c64595","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBNb3JlIFNwZWVkIEJ1dHRvbnMgb24gWW91VHViZQovLyBAbmFtZTp0ciAgICAgIFlvdVR1YmUtZGEgRGFoYSBGYXpsYSBIxLF6IETDvMSfbWVzaQovLyBAbmFtZTpheiAgICAgIFlvdVR1YmUtZGEgRGFoYSDDh294IFPDvHLJmXQgRMO8eW3JmXNpCi8vIEBuYW1lOnJ1ICAgICAg0JHQvtC70YzRiNC1INC60L3QvtC/0L7QuiDRgdC60L7RgNC+0YHRgtC4INC90LAgWW91VHViZQovLyBAZGVzY3JpcHRpb24gIEFkZHMgYnV0dG9ucyB1bmRlciBhIFlvdVR1YmUgdmlkZW8gd2l0aCBtb3JlIHNwZWVkcy4KLy8gQGRlc2NyaXB0aW9uOnRyIFlvdVR1YmUgdmlkZW9zdW51biBhbHTEsW5kYSBkYWhhIGZhemxhIGjEsXogacOnaW4gZMO8xJ9tZWxlciBla2xlci4KLy8gQGRlc2NyaXB0aW9uOmF6IFlvdVR1YmUgdmlkZW9zdW51biBhbHTEsW5kYSBkYWhhIMOnb3ggc8O8csmZdCDDvMOnw7xuIGTDvHltyZlsyZlyIMmZbGF2yZkgZWRpci4KLy8gQGRlc2NyaXB0aW9uOnJ1INCR0L7Qu9GM0YjQtSDQutC90L7Qv9C+0Log0YHQutC+0YDQvtGB0YLQuCDQvdCwIFlvdVR1YmUuCi8vIEBhdXRob3IgICAgICAgT3J1YyBRYWZhcm92IChPcnI4ODgpCi8vIEB2ZXJzaW9uICAgICAgMS4wLjAKLy8gQGxpY2Vuc2UgICAgICBNSVQKLy8gQG1hdGNoICAgICAgICAqOi8vKi55b3V0dWJlLmNvbS8qCi8vIEBtYXRjaCAgICAgICAgKjovL3lvdXR1YmUuY29tLyoKLy8gQGljb24gICAgICAgICBodHRwczovL3d3dy5nb29nbGUuY29tL3MyL2Zhdmljb25zP3N6PTY0JmRvbWFpbj15b3V0dWJlLmNvbQovLyBAZ3JhbnQgICAgICAgIG5vbmUKLy8gQHJ1bi1hdCAgICAgICBkb2N1bWVudC1pZGxlCi8vIEBjb250cmlidXRpb25VUkwgaHR0cHM6Ly93d3cueW91dHViZS5jb20vQE9yclN0dWRpbwovLyBAbmFtZXNwYWNlICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9vcnJzdHVkaW8KLy8gQGhvbWVwYWdlVVJMICBodHRwczovL2dpdGh1Yi5jb20vb3Jyc3R1ZGlvL3lvdXR1YmUtbW9yZS1zcGVlZC1idXR0b25zCi8vIEBzdXBwb3J0VVJMICAgaHR0cHM6Ly9naXRodWIuY29tL29ycnN0dWRpby95b3V0dWJlLW1vcmUtc3BlZWQtYnV0dG9ucy9pc3N1ZXMKLy8gQGRvd25sb2FkVVJMIGh0dHBzOi8vdXBkYXRlLmdyZWFzeWZvcmsub3JnL3NjcmlwdHMvNTQ5ODM4L01vcmUlMjBTcGVlZCUyMEJ1dHRvbnMlMjBvbiUyMFlvdVR1YmUudXNlci5qcwovLyBAdXBkYXRlVVJMIGh0dHBzOi8vdXBkYXRlLmdyZWFzeWZvcmsub3JnL3NjcmlwdHMvNTQ5ODM4L01vcmUlMjBTcGVlZCUyMEJ1dHRvbnMlMjBvbiUyMFlvdVR1YmUubWV0YS5qcwovLyA9PS9Vc2VyU2NyaXB0PT0KCihmdW5jdGlvbigpIHsKICAgICd1c2Ugc3RyaWN0JzsKCiAgICAvLyBCRUdJTiB3YWl0Rm9yS2V5RWxlbWVudHMKICAgIC8qKgogKiBBIHV0aWxpdHkgZnVuY3Rpb24gZm9yIHVzZXJzY3JpcHRzIHRoYXQgZGV0ZWN0cyBhbmQgaGFuZGxlcyBBSkFYZWQgY29udGVudC4KICoKICogVXNhZ2UgZXhhbXBsZToKICoKICogICAgIGZ1bmN0aW9uIGNhbGxiYWNrKGRvbUVsZW1lbnQpIHsKICogICAgICAgICBkb21FbGVtZW50LmlubmVySFRNTCA9ICJUaGlzIHRleHQgaW5zZXJ0ZWQgYnkgd2FpdEZvcktleUVsZW1lbnRzKCkuIjsKICogICAgIH0KICoKICogICAgIHdhaXRGb3JLZXlFbGVtZW50cygiZGl2LmNvbW1lbnRzIiwgY2FsbGJhY2spOwogKiAgICAgLy8gb3IKICogICAgIHdhaXRGb3JLZXlFbGVtZW50cyhzZWxlY3RvckZ1bmN0aW9uLCBjYWxsYmFjayk7CiAqCiAqIEBwYXJhbSB7KHN0cmluZ3xmdW5jdGlvbil9IHNlbGVjdG9yT3JGdW5jdGlvbiAtIFRoZSBzZWxlY3RvciBzdHJpbmcgb3IgZnVuY3Rpb24uCiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIC0gVGhlIGNhbGxiYWNrIGZ1bmN0aW9uOyB0YWtlcyBhIHNpbmdsZSBET00gZWxlbWVudCBhcyBwYXJhbWV0ZXIuCiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSWYgcmV0dXJucyB0cnVlLCBlbGVtZW50IHdpbGwgYmUgcHJvY2Vzc2VkIGFnYWluIG9uIHN1YnNlcXVlbnQgaXRlcmF0aW9ucy4KICogQHBhcmFtIHtib29sZWFufSBbd2FpdE9uY2U9dHJ1ZV0gLSBXaGV0aGVyIHRvIHN0b3AgYWZ0ZXIgdGhlIGZpcnN0IGVsZW1lbnRzIGFyZSBmb3VuZC4KICogQHBhcmFtIHtudW1iZXJ9IFtpbnRlcnZhbD0zMDBdIC0gVGhlIHRpbWUgKG1zKSB0byB3YWl0IGJldHdlZW4gaXRlcmF0aW9ucy4KICogQHBhcmFtIHtudW1iZXJ9IFttYXhJbnRlcnZhbHM9LTFdIC0gVGhlIG1heCBudW1iZXIgb2YgaW50ZXJ2YWxzIHRvIHJ1biAobmVnYXRpdmUgbnVtYmVyIGZvciB1bmxpbWl0ZWQpLgogKi8KICAgIGZ1bmN0aW9uIHdhaXRGb3JLZXlFbGVtZW50cyhzZWxlY3Rvck9yRnVuY3Rpb24sIGNhbGxiYWNrLCB3YWl0T25jZSwgaW50ZXJ2YWwsIG1heEludGVydmFscykgewogICAgICAgIGlmICh0eXBlb2Ygd2FpdE9uY2UgPT09ICJ1bmRlZmluZWQiKSB7CiAgICAgICAgICAgIHdhaXRPbmNlID0gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgaWYgKHR5cGVvZiBpbnRlcnZhbCA9PT0gInVuZGVmaW5lZCIpIHsKICAgICAgICAgICAgaW50ZXJ2YWwgPSAzMDA7CiAgICAgICAgfQogICAgICAgIGlmICh0eXBlb2YgbWF4SW50ZXJ2YWxzID09PSAidW5kZWZpbmVkIikgewogICAgICAgICAgICBtYXhJbnRlcnZhbHMgPSAtMTsKICAgICAgICB9CiAgICAgICAgdmFyIHRhcmdldE5vZGVzID0gKHR5cGVvZiBzZWxlY3Rvck9yRnVuY3Rpb24gPT09ICJmdW5jdGlvbiIpCiAgICAgICAgPyBzZWxlY3Rvck9yRnVuY3Rpb24oKQogICAgICAgIDogZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvck9yRnVuY3Rpb24pOwoKICAgICAgICB2YXIgdGFyZ2V0c0ZvdW5kID0gdGFyZ2V0Tm9kZXMgJiYgdGFyZ2V0Tm9kZXMubGVuZ3RoID4gMDsKICAgICAgICBpZiAodGFyZ2V0c0ZvdW5kKSB7CiAgICAgICAgICAgIHRhcmdldE5vZGVzLmZvckVhY2goZnVuY3Rpb24odGFyZ2V0Tm9kZSkgewogICAgICAgICAgICAgICAgdmFyIGF0dHJBbHJlYWR5Rm91bmQgPSAiZGF0YS11c2Vyc2NyaXB0LWFscmVhZHlGb3VuZCI7CiAgICAgICAgICAgICAgICB2YXIgYWxyZWFkeUZvdW5kID0gdGFyZ2V0Tm9kZS5nZXRBdHRyaWJ1dGUoYXR0ckFscmVhZHlGb3VuZCkgfHwgZmFsc2U7CiAgICAgICAgICAgICAgICBpZiAoIWFscmVhZHlGb3VuZCkgewogICAgICAgICAgICAgICAgICAgIHZhciBjYW5jZWxGb3VuZCA9IGNhbGxiYWNrKHRhcmdldE5vZGUpOwogICAgICAgICAgICAgICAgICAgIGlmIChjYW5jZWxGb3VuZCkgewogICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRzRm91bmQgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldE5vZGUuc2V0QXR0cmlidXRlKGF0dHJBbHJlYWR5Rm91bmQsIHRydWUpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgICBpZiAobWF4SW50ZXJ2YWxzICE9PSAwICYmICEodGFyZ2V0c0ZvdW5kICYmIHdhaXRPbmNlKSkgewogICAgICAgICAgICBtYXhJbnRlcnZhbHMgLT0gMTsKICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHdhaXRGb3JLZXlFbGVtZW50cyhzZWxlY3Rvck9yRnVuY3Rpb24sIGNhbGxiYWNrLCB3YWl0T25jZSwgaW50ZXJ2YWwsIG1heEludGVydmFscyk7CiAgICAgICAgICAgIH0sIGludGVydmFsKTsKICAgICAgICB9CiAgICB9CiAgICAvLyBFTkQgd2FpdEZvcktleUVsZW1lbnRzCgogICAgLy8gQWN0dWFsIGNvZGUgc3RhcnRzIGhlcmUKICAgIGxldCBmdW5jRG9uZSA9IGZhbHNlOwogICAgY29uc3QgdGl0bGVFbGVtU2VsZWN0b3IgPSAnZGl2I3RpdGxlLnN0eWxlLXNjb3BlLnl0ZC13YXRjaC1tZXRhZGF0YSc7CiAgICBjb25zdCBjb2xvcnMgPSBbJyMwNzI1MjUnLCAnIzI4N0Y1NCcsICcjQzIyNTQ0J107IC8vIGh0dHBzOi8vd3d3LnNjaGVtZWNvbG9yLmNvbS93ZWRkaW5nLWluLWluZGlhLnBocAogICAgaWYgKCFmdW5jRG9uZSkgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3l0LW5hdmlnYXRlLXN0YXJ0JywgYWRkU3BlZWRzKTsKCiAgICBpZiAoZG9jdW1lbnQuYm9keSAmJiAhZnVuY0RvbmUpIHsKICAgICAgICB3YWl0Rm9yS2V5RWxlbWVudHModGl0bGVFbGVtU2VsZWN0b3IsIGFkZFNwZWVkcyk7CiAgICB9CgogICAgZnVuY3Rpb24gYWRkU3BlZWRzKCkgewogICAgICAgIGlmIChmdW5jRG9uZSkgcmV0dXJuOwoKICAgICAgICBsZXQgYmdDb2xvciA9IGNvbG9yc1swXTsKICAgICAgICBsZXQgbW9yZVNwZWVkc0RpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgICAgIG1vcmVTcGVlZHNEaXYuaWQgPSAnbW9yZS1zcGVlZHMnOwoKICAgICAgICBmb3IgKGxldCBpID0gMC4yNTsgaSA8IDE2OyBpICs9LjI1KSB7CiAgICAgICAgICAgIGlmIChpID49IDEpIHsgYmdDb2xvciA9IGNvbG9yc1sxXTsgfQogICAgICAgICAgICBpZiAoaSA+IDQpIHsgaSs9Ljc1OyB9CiAgICAgICAgICAgIGlmIChpID4gOCkgeyBpKys7IGJnQ29sb3IgPSBjb2xvcnNbMl07IH0KCiAgICAgICAgICAgIGxldCBidG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTsKICAgICAgICAgICAgYnRuLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGJnQ29sb3I7CiAgICAgICAgICAgIGJ0bi5zdHlsZS5tYXJnaW5SaWdodCA9ICc0cHgnOwogICAgICAgICAgICBidG4uc3R5bGUuYm9yZGVyID0gJzFweCBzb2xpZCAjRDNEM0QzJzsKICAgICAgICAgICAgYnRuLnN0eWxlLmJvcmRlclJhZGl1cyA9ICcycHgnOwogICAgICAgICAgICBidG4uc3R5bGUuY29sb3IgPSAnI2ZmZmZmZic7CiAgICAgICAgICAgIGJ0bi5zdHlsZS5jdXJzb3IgPSAncG9pbnRlcic7CiAgICAgICAgICAgIGJ0bi5zdHlsZS5mb250RmFtaWx5ID0gJ21vbm9zcGFjZSc7CiAgICAgICAgICAgIGJ0bi50ZXh0Q29udGVudCA9ICfDlycgKyAoaS50b1N0cmluZygpLnN1YnN0cigwLCAxKSA9PSAnMCcgPyBpLnRvU3RyaW5nKCkuc3Vic3RyKDEpOiBpLnRvU3RyaW5nKCkpOwogICAgICAgICAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCd2aWRlbycpWzBdLnBsYXliYWNrUmF0ZSA9IGkgfSApOwogICAgICAgICAgICBtb3JlU3BlZWRzRGl2LmFwcGVuZENoaWxkKGJ0bik7CiAgICAgICAgfQoKICAgICAgICBsZXQgdGl0bGVFbGVtID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aXRsZUVsZW1TZWxlY3Rvcik7CiAgICAgICAgdGl0bGVFbGVtLmFmdGVyKG1vcmVTcGVlZHNEaXYpOwoKICAgICAgICBmdW5jRG9uZSA9IHRydWU7CiAgICB9Cn0pKCk7Cg=="},{"name":"Auto Skip YouTube Ads","options":{"check_for_updates":true,"user_modified":null,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"run_in":null,"tags":[],"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["https://www.youtube.com/*","https://m.youtube.com/*","https://music.youtube.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":["https://studio.youtube.com/*"],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_run_in":[],"orig_noframes":true,"orig_tags":[]}},"storage":{"ts":1758125752226,"data":{}},"enabled":true,"position":3,"file_url":"https://update.greasyfork.org/scripts/498197/Auto%20Skip%20YouTube%20Ads.user.js","uuid":"4a648450-6468-4c06-8453-10e3a4611ad9","source":""},{"name":"Tabview YouTube Totara","options":{"check_for_updates":true,"user_modified":null,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"run_in":null,"tags":[],"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["https://www.youtube.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":["/^https?://\\w+\\.youtube\\.com\\/live_chat.*$/","/^https?://\\S+\\.(txt|png|jpg|jpeg|gif|xml|svg|manifest|log|ini)[^\\/]*$/"],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-start","orig_run_in":[],"orig_noframes":true,"orig_tags":[]}},"storage":{"ts":1756027020256,"data":{}},"enabled":true,"position":4,"file_url":"https://update.greasyfork.org/scripts/501249/Tabview%20YouTube%20Totara.user.js","uuid":"a56f1a8b-1221-4a1b-81fb-546b642782a9","source":"","requires":[{"meta":{"name":"nextBrowserTick.min.js","url":"https://cdn.jsdelivr.net/gh/cyfung1031/userscript-supports@c2b707e4977f77792042d4a5015fb188aae4772e/library/nextBrowserTick.min.js","ts":1758014587537,"mimetype":"text/javascript"},"source":"LyoqCiAqIE1pbmlmaWVkIGJ5IGpzRGVsaXZyIHVzaW5nIFRlcnNlciB2NS4zOS4wLgogKiBPcmlnaW5hbCBmaWxlOiAvZ2gvY3lmdW5nMTAzMS91c2Vyc2NyaXB0LXN1cHBvcnRzQGMyYjcwN2U0OTc3Zjc3NzkyMDQyZDRhNTAxNWZiMTg4YWFlNDc3MmUvbGlicmFyeS9uZXh0QnJvd3NlclRpY2suanMKICoKICogRG8gTk9UIHVzZSBTUkkgd2l0aCBkeW5hbWljYWxseSBnZW5lcmF0ZWQgZmlsZXMhIE1vcmUgaW5mb3JtYXRpb246IGh0dHBzOi8vd3d3LmpzZGVsaXZyLmNvbS91c2luZy1zcmktd2l0aC1keW5hbWljLWZpbGVzCiAqLwp2YXIgbmV4dEJyb3dzZXJUaWNrPXZvaWQgMCE9PW5leHRCcm93c2VyVGljayYmbmV4dEJyb3dzZXJUaWNrLnZlcnNpb24+PTI/bmV4dEJyb3dzZXJUaWNrOigoKT0+eyJ1c2Ugc3RyaWN0Ijtjb25zdCBlPSJ1bmRlZmluZWQiIT10eXBlb2Ygc2VsZj9zZWxmOiJ1bmRlZmluZWQiIT10eXBlb2YgZ2xvYmFsP2dsb2JhbDp0aGlzO2xldCB0PSEwO2lmKCFmdW5jdGlvbiBuKHMpe3JldHVybiBzP3Q9ITE6ZS5wb3N0TWVzc2FnZSYmIWUuaW1wb3J0U2NyaXB0cyYmZS5hZGRFdmVudExpc3RlbmVyPyhlLmFkZEV2ZW50TGlzdGVuZXIoIm1lc3NhZ2UiLG4sITEpLGUucG9zdE1lc3NhZ2UoIiQkJCIsIioiKSxlLnJlbW92ZUV2ZW50TGlzdGVuZXIoIm1lc3NhZ2UiLG4sITEpLHQpOnZvaWQgMH0oKSlyZXR1cm4gdm9pZCBjb25zb2xlLndhcm4oIllvdXIgYnJvd3NlciBlbnZpcm9ubWVudCBjYW5ub3QgdXNlIG5leHRCcm93c2VyVGljayIpO2NvbnN0IG49KGFzeW5jKCk9Pnt9KSgpLmNvbnN0cnVjdG9yO2xldCBzPW51bGw7Y29uc3Qgbz1uZXcgTWFwLHtmbG9vcjpyLHJhbmRvbTppfT1NYXRoO2xldCBsO2Rve2w9YCQkbmV4dEJyb3dzZXJUaWNrJCQkeyhpKCkrOCkudG9TdHJpbmcoKS5zbGljZSgyKX0kJGB9d2hpbGUobCBpbiBlKTtjb25zdCBhPWwsYz1hLmxlbmd0aCs5O2VbYV09MTtlLmFkZEV2ZW50TGlzdGVuZXIoIm1lc3NhZ2UiLChlPT57aWYoMCE9PW8uc2l6ZSl7Y29uc3QgdD0oZXx8MCkuZGF0YTtpZigic3RyaW5nIj09dHlwZW9mIHQmJnQubGVuZ3RoPT09YyYmZS5zb3VyY2U9PT0oZS50YXJnZXR8fDEpKXtjb25zdCBlPW8uZ2V0KHQpO2UmJigicCI9PT10WzBdJiYocz1udWxsKSxvLmRlbGV0ZSh0KSxlKCkpfX19KSwhMSk7Y29uc3QgZD0odD1vKT0+e2lmKHQ9PT1vKXtpZihzKXJldHVybiBzO2xldCB0O2Rve3Q9YHAke2F9JHtyKDMxNDE1OTI2NTM1OSppKCkrMzE0MTU5MjY1MzU5KS50b1N0cmluZygzNil9YH13aGlsZShvLmhhcyh0KSk7cmV0dXJuIHM9bmV3IG4oKGU9PntvLnNldCh0LGUpfSkpLGUucG9zdE1lc3NhZ2UodCwiKiIpLHQ9bnVsbCxzfXtsZXQgbjtkb3tuPWBmJHthfSR7cigzMTQxNTkyNjUzNTkqaSgpKzMxNDE1OTI2NTM1OSkudG9TdHJpbmcoMzYpfWB9d2hpbGUoby5oYXMobikpO28uc2V0KG4sdCksZS5wb3N0TWVzc2FnZShuLCIqIil9fTtyZXR1cm4gZC52ZXJzaW9uPTIsZH0pKCk7Ci8vIyBzb3VyY2VNYXBwaW5nVVJMPS9zbS9jMWEwZjY4YmNlZDYxYmE5YWRkNDFhM2UzZDg5ZTI2YzQxYjIzNDJiYzc2MzUwNGIwMmFiMDhkODg4ZjY4NjYzLm1hcA=="}]},{"name":"YouTube speed rememberer","options":{"check_for_updates":true,"user_modified":null,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"run_in":null,"tags":[],"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["*.youtube.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-body","orig_run_in":[],"orig_noframes":null}},"storage":{"ts":1755912927267,"data":{}},"enabled":true,"position":5,"file_url":"https://greasyfork.org/scripts/27091-youtube-speed-rememberer/code/YouTube%20speed%20rememberer.user.js","uuid":"fa903b9e-8d6f-408f-bcf7-5e2fd57a0512","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICAgIFlvdVR1YmUgc3BlZWQgcmVtZW1iZXJlcgovLyBAdmVyc2lvbiAgICAgICAgMC4zLjQKLy8gQGRlc2NyaXB0aW9uICAgIFJlbWVtYmVycyBwbGF5YmFjayBzcGVlZC4KLy8gQGRlc2NyaXB0aW9uOnJ1INCX0LDQv9C+0LzQuNC90LDQtdGCINGB0LrQvtGA0L7RgdGC0Ywg0LLQvtGB0L/RgNC+0LjQt9Cy0LXQtNC10L3QuNGPLgovLyBAYXV0aG9yICAgICAgICAgZ3Z2YWQKLy8gQG1hdGNoICAgICAgICAgICoueW91dHViZS5jb20vKgovLyBAcnVuLWF0ICAgICAgICAgZG9jdW1lbnQtYm9keQovLyBAbGljZW5zZSAgICAgICAgR1BMLTMuMCs7IGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9ncGwtMy4wLnR4dAovLyBAbmFtZXNwYWNlICAgICAgaHR0cHM6Ly9ncmVhc3lmb3JrLm9yZy91c2Vycy8xMDAxNjAKLy8gPT0vVXNlclNjcmlwdD09CgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICBjb25zdCBQTEFZRVJfU0VMRUNUT1IgPSAiI21vdmllX3BsYXllciI7CiAgICBsZXQgc3RvcmUgPSB7CiAgICAgICAgZ2V0IHJhdGUoKSB7CiAgICAgICAgICAgIHJldHVybiBwYXJzZUZsb2F0KGxvY2FsU3RvcmFnZS5nZXRJdGVtKCJwbC1yYXRlIikpIHx8IDEuMDsKICAgICAgICB9LAogICAgICAgIHNldCByYXRlKHYpIHsKICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oInBsLXJhdGUiLCB2KTsKICAgICAgICB9CiAgICB9CgogICAgLy8gIHNldCBidXR0b24gb24gdmlkZW8gcGxheWVyCiAgICAvLyAgX21zZyAtIGxhYmxlIHN0cmluZwogICAgbGV0IHNldExhYmVsID0gZnVuY3Rpb24oX21zZywgX21wKSB7CiAgICAgICAgbGV0IGxhYmVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiI195dHAtbGFiZWwiKTsKICAgICAgICBpZiAoX21zZyA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIGlmIChsYWJlbCkgbGFiZWwucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZChsYWJlbCk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgaWYgKGxhYmVsKSB7CiAgICAgICAgICAgIGxhYmVsLmlubmVyVGV4dCA9IF9tc2c7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIGxldCBjbHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFBMQVlFUl9TRUxFQ1RPUikucXVlcnlTZWxlY3RvcigiI21vdmllX3BsYXllciAueXRwLXJpZ2h0LWNvbnRyb2xzIik7CgogICAgICAgIGxldCBzcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKCdpZCcsJ195dHAtbGFiZWwnKTsKICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCd5dHAtYnV0dG9uJyk7CiAgICAgICAgc3Bhbi5vbmNsaWNrID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIF9tcC5zZXRQbGF5YmFja1JhdGUoMSk7CiAgICAgICAgfTsKICAgICAgICBzcGFuLmlubmVyVGV4dCA9IF9tc2c7CgogICAgICAgIGNscy5pbnNlcnRCZWZvcmUoc3BhbiwgY2xzLmZpcnN0Q2hpbGQpOwogICAgfTsKCiAgICAvLyAgc2V0IG9yIHJlbW92ZSBidXR0b24KICAgIGxldCBzZXRTcGVlZExhYmVsID0gZnVuY3Rpb24ocmF0ZSwgbXApIHsKICAgICAgICBzZXRMYWJlbCgocmF0ZT09MSk/IHVuZGVmaW5lZCA6ICd4JytyYXRlLCBtcCk7CiAgICB9OwoKICAgIC8vICBtb2RpZmljYXRlIHBsYXllciBvYmplY3QgYW5kIHN0b3JlIHBsYXkgcmF0ZQogICAgLy8gIG1wIC0gbW92aWVwbGF5ZXIgb2JqZWN0CiAgICBsZXQgd29ya2VyID0gZnVuY3Rpb24obXApIHsKICAgICAgICBsZXQgc3RhdGUgPSBtcC5nZXRQcm9ncmVzc1N0YXRlKCk7CgogICAgICAgIGlmIChzdG9yZS5yYXRlICE9IDEuMCAmJiAhc3RhdGUuaXNBdExpdmVIZWFkKSB7CiAgICAgICAgICAgIG1wLnNldFBsYXliYWNrUmF0ZShzdG9yZS5yYXRlKTsKICAgICAgICAgICAgc2V0U3BlZWRMYWJlbChtcC5nZXRQbGF5YmFja1JhdGUoKSwgbXApOwogICAgICAgIH0KCiAgICAgICAgbXAuYWRkRXZlbnRMaXN0ZW5lcigib25QbGF5YmFja1JhdGVDaGFuZ2UiLCBmdW5jdGlvbigpewogICAgICAgICAgICBzdG9yZS5yYXRlID0gbXAuZ2V0UGxheWJhY2tSYXRlKCk7CiAgICAgICAgICAgIHNldFNwZWVkTGFiZWwobXAuZ2V0UGxheWJhY2tSYXRlKCksIG1wKTsKICAgICAgICB9KTsKICAgIH07CgogICAgbGV0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZnVuY3Rpb24obVJlY29yZCl7CiAgICAgICAgbGV0IHBsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihQTEFZRVJfU0VMRUNUT1IpOwogICAgICAgIGlmIChwbCkgewogICAgICAgICAgICB3b3JrZXIocGwpOwogICAgICAgICAgICB0aGlzLmRpc2Nvbm5lY3QoKTsKICAgICAgICB9CiAgICB9KTsKICAgIG9ic2VydmVyLm9ic2VydmUoZG9jdW1lbnQuYm9keSwge2F0dHJpYnV0ZXM6IGZhbHNlLCBjaGlsZExpc3Q6IHRydWUsIGNoYXJhY3RlckRhdGE6IGZhbHNlfSk7Cn0pKCk7Cg=="},{"name":"Remove YouTube Shorts","options":{"check_for_updates":true,"user_modified":null,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"run_in":null,"tags":[],"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["https://*.youtube.com/*","https://m.youtube.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-start","orig_run_in":[],"orig_noframes":null,"orig_tags":[]}},"storage":{"ts":1756026877930,"data":{}},"enabled":true,"position":6,"file_url":"https://update.greasyfork.org/scripts/522057/Remove%20YouTube%20Shorts.user.js","uuid":"55193199-e2f5-4f94-a910-d615ab51d5fa","source":""},{"name":"Export ChatGPT/Gemini/Grok conversations as Markdown","options":{"check_for_updates":true,"user_modified":null,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"run_in":null,"tags":[],"override":{"use_includes":[],"orig_includes":["*://chatgpt.com/*","*://grok.com/*","*://gemini.google.com/*"],"merge_includes":true,"use_matches":[],"orig_matches":[],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_run_in":[],"orig_noframes":true,"orig_tags":[]}},"storage":{"ts":1756026299412,"data":{}},"enabled":true,"position":7,"file_url":"https://update.greasyfork.org/scripts/543471/Export%20ChatGPTGeminiGrok%20conversations%20as%20Markdown.user.js","uuid":"05a68c86-a89e-4af5-be14-a745b8f908f2","source":""},{"name":"Caixa Inútil do Facebook","options":{"check_for_updates":true,"user_modified":null,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"run_in":null,"tags":[],"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["https://www.facebook.com/*","https://facebook.com/*","https://m.facebook.com/*","https://facebookwkhpilnemxj7asaniu7vnjjbiltxjqhye3mhbshg7kx5tfyd.onion/*","http://facebookwkhpilnemxj7asaniu7vnjjbiltxjqhye3mhbshg7kx5tfyd.onion/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-start","orig_run_in":[],"orig_noframes":null,"orig_tags":[]}},"storage":{"ts":1756027455734,"data":{}},"enabled":true,"position":8,"file_url":"https://update.greasyfork.org/scripts/480649/Caixa%20In%C3%BAtil%20do%20Facebook.user.js","uuid":"2bd10121-67fe-4122-b0e2-7df891fbc607","source":""},{"name":"Picviewer CE+","options":{"check_for_updates":true,"user_modified":null,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"run_in":null,"tags":[],"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["*://*/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":["http://www.toodledo.com/tasks/*","http*://maps.google.com*/*","*://www.google.*/_/chrome/newtab*","*://mega.*/*","*://*.mega.*/*","*://onedrive.live.com/*"],"merge_excludes":true,"use_connects":[],"orig_connects":["www.google.com","www.google.com.hk","www.google.co.jp","ipv4.google.com","image.baidu.com","www.tineye.com","hoothin.com","*"],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-end","orig_run_in":[],"orig_noframes":null,"orig_tags":[]}},"storage":{"ts":1756026654704,"data":{"inited":"btrue"}},"enabled":false,"position":9,"file_url":"https://update.greasyfork.org/scripts/24204/Picviewer%20CE%2B.user.js","uuid":"d966cee8-b943-4c77-a5dd-3041f3b1ca58","source":"","requires":[{"meta":{"name":"GM_config%20CN.js","url":"https://update.greasyfork.org/scripts/6158/23710/GM_config%20CN.js","ts":1758060364733,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"pvcep_rules.js","url":"https://update.greasyfork.org/scripts/438080/1655629/pvcep_rules.js","ts":1758060364728,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"pvcep_lang.js","url":"https://update.greasyfork.org/scripts/440698/1653424/pvcep_lang.js","ts":1758060364744,"mimetype":"text/javascript"},"source":""}]},{"name":"Enable Right Click and Copy Link/Button Text on Drag","options":{"check_for_updates":true,"user_modified":null,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"run_in":null,"tags":[],"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["*://*/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_run_in":[],"orig_noframes":null,"orig_tags":[]}},"storage":{"ts":1756027954451,"data":{}},"enabled":false,"position":10,"file_url":"https://update.greasyfork.org/scripts/497612/Enable%20Right%20Click%20and%20Copy%20LinkButton%20Text%20on%20Drag.user.js","uuid":"04e4100f-bc50-4c89-a17c-766845c3a813","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBFbmFibGUgUmlnaHQgQ2xpY2sgYW5kIENvcHkgTGluay9CdXR0b24gVGV4dCBvbiBEcmFnCi8vIEB2ZXJzaW9uICAgICAgMy4wCi8vIEBkZXNjcmlwdGlvbiAgRW5hYmxlIHJpZ2h0LWNsaWNrIGNvbnRleHQgbWVudSBvbiBzaXRlcyB0aGF0IGRpc2FibGUgaXQsIGNvcHkgdGhlIHRleHQgb2YgYSBsaW5rIG9yIGJ1dHRvbiB0byB0aGUgY2xpcGJvYXJkIHdoZW4gZHJhZ2dlZCBzbGlnaHRseSwgYW5kIHJlbW92ZSBhZGRlZCBzb3VyY2UgbGlua3MgZnJvbSBjb3BpZWQgdGV4dAovLyBAZGVzY3JpcHRpb246ZGUgRXJtw7ZnbGljaHQgZGFzIEtvbnRleHRtZW7DvCBtaXQgZGVyIHJlY2h0ZW4gTWF1c3Rhc3RlIGF1ZiBXZWJzaXRlcywgZGllIGVzIGRlYWt0aXZpZXJlbiwgdW5kIGtvcGllcnQgZGVuIFRleHQgZWluZXMgTGlua3Mgb2RlciBlaW5lciBTY2hhbHRmbMOkY2hlIGluIGRpZSBad2lzY2hlbmFibGFnZSwgd2VubiBlciBsZWljaHQgZ2V6b2dlbiB3aXJkLCB1bmQgZW50ZmVybnQgaGluenVnZWbDvGd0ZSBRdWVsbGVubGlua3MgYXVzIGtvcGllcnRlbSBUZXh0Ci8vIEBkZXNjcmlwdGlvbjpydSDQktC60LvRjtGH0LjRgtGMINC60L7QvdGC0LXQutGB0YLQvdC+0LUg0LzQtdC90Y4g0L/RgNCw0LLQvtC5INC60L3QvtC/0LrQvtC5INC80YvRiNC4INC90LAg0YHQsNC50YLQsNGFLCDQutC+0YLQvtGA0YvQtSDQtdCz0L4g0L7RgtC60LvRjtGH0LDRjtGCLCDQutC+0L/QuNGA0L7QstCw0YLRjCDRgtC10LrRgdGCINGB0YHRi9C70LrQuCDQuNC70Lgg0LrQvdC+0L/QutC4INCyINCx0YPRhNC10YAg0L7QsdC80LXQvdCwINC/0YDQuCDQvdC10LHQvtC70YzRiNC+0Lwg0L/QtdGA0LXRgtCw0YHQutC40LLQsNC90LjQuCDQuCDRg9C00LDQu9GP0YLRjCDQtNC+0LHQsNCy0LvQtdC90L3Ri9C1INGB0YHRi9C70LrQuCDQvdCwINC40YHRgtC+0YfQvdC40Log0LjQtyDRgdC60L7Qv9C40YDQvtCy0LDQvdC90L7Qs9C+INGC0LXQutGB0YLQsAovLyBAZGVzY3JpcHRpb246dWsg0KPQstGW0LzQutC90YPRgtC4INC60L7QvdGC0LXQutGB0YLQvdC1INC80LXQvdGOINC/0YDQsNCy0L7RjiDQutC90L7Qv9C60L7RjiDQvNC40YjRliDQvdCwINGB0LDQudGC0LDRhSwg0Y/QutGWINC50L7Qs9C+INCy0LjQvNC40LrQsNGO0YLRjCwg0LrQvtC/0ZbRjtCy0LDRgtC4INGC0LXQutGB0YIg0L/QvtGB0LjQu9Cw0L3QvdGPINCw0LHQviDQutC90L7Qv9C60Lgg0LIg0LHRg9GE0LXRgCDQvtCx0LzRltC90YMg0L/RgNC4INC90LXQstC10LvQuNC60L7QvNGDINC/0LXRgNC10YLRj9Cz0YPQstCw0L3QvdGWINGC0LAg0LLQuNC00LDQu9GP0YLQuCDQtNC+0LTQsNC90ZYg0L/QvtGB0LjQu9Cw0L3QvdGPINC90LAg0LTQttC10YDQtdC70L4g0Lcg0LrQvtC/0ZbQudC+0LLQsNC90L7Qs9C+INGC0LXQutGB0YLRgwovLyBAZGVzY3JpcHRpb246emgg5Zyo56aB55So5Y+z6ZSu6I+c5Y2V55qE572R56uZ5LiK5ZCv55So5Y+z6ZSu6I+c5Y2V77yM5bm25Zyo56iN5b6u5ouW5Yqo5pe25bCG6ZO+5o6l5oiW5oyJ6ZKu55qE5paH5pys5aSN5Yi25Yiw5Ymq6LS05p2/77yM5bm25LuO5aSN5Yi255qE5paH5pys5Lit5Yig6Zmk5re75Yqg55qE5p2l5rqQ6ZO+5o6lCi8vIEBkZXNjcmlwdGlvbjpqYSDlj7Pjgq/jg6rjg4Pjgq/jga7jgrPjg7Pjg4bjgq3jgrnjg4jjg6Hjg4vjg6Xjg7zjgpLnhKHlirnjgavjgZnjgovjgrXjgqTjg4jjgaflj7Pjgq/jg6rjg4Pjgq/jgpLmnInlirnjgavjgZfjgIHjg6rjg7Pjgq/jgoTjg5zjgr/jg7Pjga7jg4bjgq3jgrnjg4jjgpLlsJHjgZfjg4njg6njg4PjgrDjgZfjgabjgq/jg6rjg4Pjg5fjg5zjg7zjg4njgavjgrPjg5Tjg7zjgZfjgIHjgrPjg5Tjg7zjgZfjgZ/jg4bjgq3jgrnjg4jjgYvjgonov73liqDjgZXjgozjgZ/jgr3jg7zjgrnjg6rjg7Pjgq/jgpLliYrpmaTjgZfjgb7jgZkKLy8gQGRlc2NyaXB0aW9uOm5sIFNjaGFrZWwgaGV0IHJlY2h0ZXJtdWlza25vcC1jb250ZXh0bWVudSBpbiBvcCBzaXRlcyBkaWUgZGl0IHVpdHNjaGFrZWxlbiBlbiBrb3BpZWVyIGRlIHRla3N0IHZhbiBlZW4gbGluayBvZiBrbm9wIG5hYXIgaGV0IGtsZW1ib3JkIHdhbm5lZXIgZGV6ZSBsaWNodCB3b3JkdCBnZXNsZWVwdCBlbiB2ZXJ3aWpkZXIgdG9lZ2V2b2VnZGUgYnJvbm5lbmxpbmtzIHVpdCBnZWtvcGllZXJkZSB0ZWtzdAovLyBAZGVzY3JpcHRpb246cHQgQXRpdmFyIG8gbWVudSBkZSBjb250ZXh0byBkbyBib3TDo28gZGlyZWl0byBkbyBtb3VzZSBlbSBzaXRlcyBxdWUgbyBkZXNhdGl2YW0gZSBjb3BpYXIgbyB0ZXh0byBkZSB1bSBsaW5rIG91IGJvdMOjbyBwYXJhIGEgw6FyZWEgZGUgdHJhbnNmZXLDqm5jaWEgcXVhbmRvIGFycmFzdGFkbyBsaWdlaXJhbWVudGUgZSByZW1vdmVyIGxpbmtzIGRlIGZvbnRlIGFkaWNpb25hZG9zIGRvIHRleHRvIGNvcGlhZG8KLy8gQGRlc2NyaXB0aW9uOmVzIEhhYmlsaXRhciBlbCBtZW7DuiBjb250ZXh0dWFsIGRlIGNsaWMgZGVyZWNobyBlbiBzaXRpb3MgcXVlIGxvIGRlc2hhYmlsaXRhbiB5IGNvcGlhciBlbCB0ZXh0byBkZSB1biBlbmxhY2UgbyBib3TDs24gYWwgcG9ydGFwYXBlbGVzIGN1YW5kbyBzZSBhcnJhc3RyYSBsaWdlcmFtZW50ZSB5IGVsaW1pbmFyIGxvcyBlbmxhY2VzIGRlIG9yaWdlbiBhZ3JlZ2Fkb3MgZGVsIHRleHRvIGNvcGlhZG8KLy8gQGRlc2NyaXB0aW9uOml0IEFiaWxpdGEgaWwgbWVudSBjb250ZXN0dWFsZSBkZWwgdGFzdG8gZGVzdHJvIGRlbCBtb3VzZSBzdSBzaXRpIGNoZSBsbyBkaXNhYmlsaXRhbm8gZSBjb3BpYSBpbCB0ZXN0byBkaSB1biBjb2xsZWdhbWVudG8gbyBwdWxzYW50ZSBuZWdsaSBhcHB1bnRpIHF1YW5kbyB2aWVuZSB0cmFzY2luYXRvIGxlZ2dlcm1lbnRlIGUgcmltdW92ZSBpIGNvbGxlZ2FtZW50aSBhbGxhIGZvbnRlIGFnZ2l1bnRpIGRhbCB0ZXN0byBjb3BpYXRvCi8vIEBkZXNjcmlwdGlvbjphciDYqtmF2YPZitmGINmC2KfYptmF2Kkg2KfZhNmG2YLYsSDYqNiy2LEg2KfZhNmF2KfZiNizINin2YTYo9mK2YXZhiDYudmE2Ykg2KfZhNmF2YjYp9mC2Lkg2KfZhNiq2Yog2KrYudi32YTZh9inINmI2YbYs9iuINmG2LUg2KfZhNix2KfYqNi3INij2Ygg2KfZhNiy2LEg2KXZhNmJINin2YTYrdin2YHYuNipINi52YbYryDYs9it2KjZhyDZgtmE2YrZhNin2Ysg2YjYpdiy2KfZhNipINix2YjYp9io2Lcg2KfZhNmF2LXYr9ixINin2YTZhdi22KfZgdipINmF2YYg2KfZhNmG2LUg2KfZhNmF2YbYs9mI2K4KLy8gQGRlc2NyaXB0aW9uOmZyIEFjdGl2ZXIgbGUgbWVudSBjb250ZXh0dWVsIGR1IGNsaWMgZHJvaXQgc3VyIGxlcyBzaXRlcyBxdWkgbGUgZMOpc2FjdGl2ZW50IGV0IGNvcGllciBsZSB0ZXh0ZSBkJ3VuIGxpZW4gb3UgZCd1biBib3V0b24gZGFucyBsZSBwcmVzc2UtcGFwaWVycyBsb3JzcXUnaWwgZXN0IGzDqWfDqHJlbWVudCBnbGlzc8OpIGV0IHN1cHByaW1lciBsZXMgbGllbnMgZGUgc291cmNlIGFqb3V0w6lzIGR1IHRleHRlIGNvcGnDqQovLyBAZGVzY3JpcHRpb246cGwgV8WCxIVjeiBtZW51IGtvbnRla3N0b3dlIGtsaWtuacSZY2lhIHByYXd5bSBwcnp5Y2lza2llbSBteXN6eSBuYSBzdHJvbmFjaCwga3TDs3JlIGplIHd5xYLEhWN6YWrEhSwgaSBza29waXVqIHRla3N0IGxpbmt1IGx1YiBwcnp5Y2lza3UgZG8gc2Nob3drYSBwbyBsZWtraW0gcHJ6ZWNpxIVnbmnEmWNpdSBpIHVzdcWEIGRvZGFuZSBsaW5raSDFunLDs2TFgm93ZSB6IHNrb3Bpb3dhbmVnbyB0ZWtzdHUKLy8gQGRlc2NyaXB0aW9uOmhpIOCkieCkqCDgpLjgpL7gpIfgpJ/gpYvgpIIg4KSq4KSwIOCksOCkvuCkh+Ckny3gpJXgpY3gpLLgpL/gpJUg4KS44KSC4KSm4KSw4KWN4KStIOCkruClh+CkqOClgiDgpLjgpJXgpY3gpLfgpK4g4KSV4KSw4KWH4KSCIOCknOCliyDgpIfgpLjgpYcg4KSF4KSV4KWN4KS34KSuIOCkleCksOCkpOClhyDgpLngpYjgpIIg4KSU4KSwIOCksuCkv+CkguCklSDgpK/gpL4g4KSs4KSf4KSoIOCkleClhyDgpJ/gpYfgpJXgpY3gpLjgpY3gpJ8g4KSV4KWLIOCkueCksuCljeCkleClhyDgpLjgpYcg4KSW4KWA4KSC4KSa4KSo4KWHIOCkquCksCDgpJXgpY3gpLLgpL/gpKrgpKzgpYvgpLDgpY3gpKEg4KSq4KSwIOCkleClieCkquClgCDgpJXgpLDgpYfgpIIg4KSU4KSwIOCkleClieCkquClgCDgpJXgpL/gpI8g4KSX4KSPIOCkn+Clh+CkleCljeCkuOCljeCknyDgpLjgpYcg4KSc4KWL4KSh4KS84KWHIOCkl+CkjyDgpLjgpY3gpLDgpYvgpKQg4KSy4KS/4KSC4KSVIOCkqOCkv+CkleCkvuCksuClh+CkggovLyBAZGVzY3JpcHRpb246Ym4g4Kah4Ka+4KaoIOCmleCnjeCmsuCmv+CmlSDgppXgpqjgpp/gp4fgppXgp43gprjgpp8g4Kau4KeH4Kao4KeBIOCmuOCmleCnjeCmt+CmriDgppXgprDgp4Hgpqgg4Kav4Ka+IOCmj+Cmn+CmvyDgpoXgppXgp43gprfgpq4g4KaV4Kaw4KeHIOCmj+CmrOCmgiDgprngpr7gprLgppXgpr7gpq3gpr7gpqzgp4cg4Kaf4KeH4Kao4KeHIOCmqOCmv+Cmr+CmvOCnhyDgppfgp4fgprLgp4cg4Kay4Ka/4KaZ4KeN4KaVIOCmrOCmviDgpqzgp4vgpqTgpr7gpq7gp4fgprAg4Kaq4Ka+4Kag4KeN4KavIOCmleCnjeCmsuCmv+CmquCmrOCni+CmsOCnjeCmoeCnhyDgppXgpqrgpr8g4KaV4Kaw4KeB4KaoIOCmj+CmrOCmgiDgppXgpqrgpr8g4KaV4Kaw4Ka+IOCmquCmvuCmoOCnjeCmryDgpqXgp4fgppXgp4cg4Kav4KeL4KaXIOCmleCmsOCmviDgpongpqTgp43gprgg4Kay4Ka/4KaZ4KeN4KaV4KaX4KeB4Kay4Ka/IOCmuOCmsOCmvuCmqAovLyBAZGVzY3JpcHRpb246a28g7Jik66W47Kq9IO2BtOumrSDsu6jthY3siqTtirgg66mU64m066W8IOu5hO2ZnOyEse2ZlO2VmOuKlCDsgqzsnbTtirjsl5DshJwg7Jik66W47Kq9IO2BtOumreydhCDtmZzshLHtmZTtlZjqs6Ag66eB7YGsIOuYkOuKlCDrsoTtirwg7YWN7Iqk7Yq466W8IOyVveqwhCDrk5zrnpjqt7jtlZjrqbQg7YG066a967O065Oc7JeQIOuzteyCrO2VmOqzoCDrs7XsgqzrkJwg7YWN7Iqk7Yq47JeQ7IScIOy2lOqwgOuQnCDshozsiqQg66eB7YGs66W8IOygnOqxsO2VqeuLiOuLpAovLyBAZGVzY3JpcHRpb246dmkgS8OtY2ggaG/huqF0IG1lbnUgbmfhu68gY+G6o25oIGNodeG7mXQgcGjhuqNpIHRyw6puIGPDoWMgdHJhbmcgd2ViIHbDtCBoaeG7h3UgaMOzYSBuw7MgdsOgIHNhbyBjaMOpcCB2xINuIGLhuqNuIGPhu6dhIGxpw6puIGvhur90IGhv4bq3YyBuw7p0IHbDoG8gYuG6o25nIHThuqFtIGtoaSBrw6lvIG5o4bq5IHbDoCBsb+G6oWkgYuG7jyBjw6FjIGxpw6puIGvhur90IG5ndeG7k24gxJHGsOG7o2MgdGjDqm0gdOG7qyB2xINuIGLhuqNuIMSRw6Mgc2FvIGNow6lwCi8vIEBkZXNjcmlwdGlvbjp0ciBTYcSfIHTEsWtsYW1hIGJhxJ9sYW0gbWVuw7xzw7xuw7wgZGV2cmUgZMSxxZ/EsSBixLFyYWthbiBzaXRlbGVyZGUgc2HEnyB0xLFrbGFtYSBiYcSfbGFtIG1lbsO8c8O8bsO8IGV0a2lubGXFn3RpcmluIHZlIGJpciBiYcSfbGFudMSxIHZleWEgZMO8xJ9tZW5pbiBtZXRuaW5pIGhhZmlmw6dlIHPDvHLDvGtsZWRpxJ9pbml6ZGUgcGFub3lhIGtvcHlhbGF5xLFuIHZlIGtvcHlhbGFuYW4gbWV0aW5kZW4gZWtsZW5lbiBrYXluYWsgYmHEn2xhbnTEsWxhcsSxIGthbGTEsXLEsW4KLy8gQGRlc2NyaXB0aW9uOnRoIOC5gOC4m+C4tOC4lOC5g+C4iuC5ieC4h+C4suC4meC5gOC4oeC4meC4ueC4hOC4peC4tOC4geC4guC4p+C4suC4muC4meC5gOC4p+C5h+C4muC5hOC4i+C4leC5jOC4l+C4teC5iOC4m+C4tOC4lOC5g+C4iuC5ieC4h+C4suC4meC5geC4peC4sOC4hOC4seC4lOC4peC4reC4geC4guC5ieC4reC4hOC4p+C4suC4oeC4guC4reC4h+C4peC4tOC4h+C4geC5jOC4q+C4o+C4t+C4reC4m+C4uOC5iOC4oeC5hOC4m+C4ouC4seC4h+C4hOC4peC4tOC4m+C4muC4reC4o+C5jOC4lOC5gOC4oeC4t+C5iOC4reC4luC4ueC4geC4peC4suC4geC5gOC4muC4siDguYYg4LmB4Lil4Liw4Lil4Lia4Lil4Li04LiH4LiB4LmM4LiX4Li14LmI4LmA4Lie4Li04LmI4Lih4LiI4Liy4LiB4LiC4LmJ4Lit4LiE4Lin4Liy4Lih4LiX4Li14LmI4LiE4Lix4LiU4Lil4Lit4LiBCi8vIEBkZXNjcmlwdGlvbjpheiBTYXl0ZGEgc2HEnyBrbGlrIGtvbnRla3N0IG1lbnl1c3VudSBha3RpdmzJmcWfZGlyaW4sIGxpbmsgdsmZIHlhIGTDvHltyZluaW4gbcmZdG5pbmkgecO8bmfDvGxjyZkgc8O8csO8a2zJmW3JmWtsyZkgcGFub3lhIGtvcHlhbGF5xLFuIHbJmSBrb3B5YWxhbm3EscWfIG3JmXRuyZkgyZlsYXbJmSBlZGlsbWnFnyBtyZluYsmZIGxpbmtsyZlyaW5pIHNpbGluCi8vIEBkZXNjcmlwdGlvbjpreiDQodCw0LnRgtGC0LDRgNC00LAg0L7SoyDQttCw0psg0LHQsNGC0YvRgNC80LAg0LrQvtC90YLQtdC60YHRgtGC0ZbQuiDQvNOZ0LfRltGA0ZbQvSDSm9C+0YHRi9Kj0YvQtywg0YHRltC70YLQtdC80LUg0L3QtdC80LXRgdC1INCx0LDRgtGL0YDQvNCwINC805nRgtGW0L3RltC9INC20LXSo9GW0Lsg0YLQsNGA0YLRi9C/LCDQsNC70LzQsNGB0YMg0LHRg9GE0LXRgNGW0L3QtSDQutOp0YjRltGA0ZbSo9GW0Lcg0LbTmdC90LUg0LrTqdGI0ZbRgNGW0LvQs9C10L0g0LzTmdGC0ZbQvdC90LXQvSDSm9C+0YHRi9C70pPQsNC9INC00LXRgNC10LrQutOp0Lcg0YHRltC70YLQtdC80LXQu9C10YDRltC9INCw0LvRi9C/INGC0LDRgdGC0LDSo9GL0LcKLy8gQGRlc2NyaXB0aW9uOnV6IFNheXRsYXJkYSBvJ25nIHR1Z21hIGtvbnRla3N0IG1lbnl1c2luaSB5b3FpbmcsIGhhdm9sYSB5b2tpIHR1Z21hIG1hdG5pbmkgb3pnaW5hIHN1ZHJhYiwgYWxtYXNoaXNoIGJ1ZmVyaWdhIG51c3hhIGtvJ2NoaXJpbmcgdmEgbnVzeGFsYW5nYW4gbWF0bmdhIHFvJ3NoaWxnYW4gbWFuYmEgaGF2b2xhbGFyaW5pIG9saWIgdGFzaGxhbmcKLy8gQGljb24gICAgICAgICAgIGh0dHBzOi8vaWRlLm9ubC9pbWcvc2NyaXB0L2NvcHlsaW5rZHJhZy5wbmcKLy8gQG5hbWVzcGFjZSAgICAgIGh0dHBzOi8vaWRlLm9ubC9zY3JpcHRzLzMwLWtvcGlyb3ZhbmllLXRla3N0YS1zc3lsb2stcy1wb21vc2NoanUtdGFtcGVybW9ua2V5Lmh0bWwKLy8gQGxpY2Vuc2UgICAgICAgIE1JVAovLyBAbWF0Y2ggICAgICAgICAgKjovLyovKgovLyBAZ3JhbnQgICAgICAgICAgbm9uZQovLyBAYXV0aG9yICAgICAgICAgU2l0ZWdvCi8vIEBkb3dubG9hZFVSTCBodHRwczovL3VwZGF0ZS5ncmVhc3lmb3JrLm9yZy9zY3JpcHRzLzQ5NzYxMi9FbmFibGUlMjBSaWdodCUyMENsaWNrJTIwYW5kJTIwQ29weSUyMExpbmtCdXR0b24lMjBUZXh0JTIwb24lMjBEcmFnLnVzZXIuanMKLy8gQHVwZGF0ZVVSTCBodHRwczovL3VwZGF0ZS5ncmVhc3lmb3JrLm9yZy9zY3JpcHRzLzQ5NzYxMi9FbmFibGUlMjBSaWdodCUyMENsaWNrJTIwYW5kJTIwQ29weSUyMExpbmtCdXR0b24lMjBUZXh0JTIwb24lMjBEcmFnLm1ldGEuanMKLy8gPT0vVXNlclNjcmlwdD09CgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CgogICAgLy8g0JzQsNGB0YHQuNCyINC00L7QvNC10L3QvtCyINC00LvRjyDQuNGB0LrQu9GO0YfQtdC90LjQuQogICAgLy8gQXJyYXkgb2YgZG9tYWlucyBmb3IgZXhjZXB0aW9ucwogICAgY29uc3QgZXhjbHVkZWREb21haW5zID0gWwogICAgICAgICdjb2lubWFya2V0Y2FwLmNvbScsCiAgICAgICAgJ2Fub3RoZXItZXhhbXBsZS5jb20nLAogICAgICAgICd5ZXRhbm90aGVyLWV4YW1wbGUuY29tJwogICAgXTsKCiAgICAvLyBHZXR0aW5nIHRoZSBjdXJyZW50IGRvbWFpbgogICAgY29uc3QgY3VycmVudERvbWFpbiA9IHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZTsKCiAgICAvLyBDaGVja2luZyBpZiB0aGUgY3VycmVudCBkb21haW4gaXMgaW4gdGhlIGV4Y2VwdGlvbiBhcnJheQogICAgaWYgKGV4Y2x1ZGVkRG9tYWlucy5pbmNsdWRlcyhjdXJyZW50RG9tYWluKSkgewogICAgICAgIHJldHVybjsgLy8gU3RvcCBzY3JpcHQgZXhlY3V0aW9uIGlmIHRoZSBkb21haW4gaXMgaW4gZXhjZXB0aW9ucwogICAgfQoKICAgIC8vIEZ1bmN0aW9uIHRvIHJlbW92ZSBldmVudCBsaXN0ZW5lcnMgYW5kIGlubGluZSBzY3JpcHRzIGJsb2NraW5nIHJpZ2h0LWNsaWNrCiAgICBmdW5jdGlvbiBlbmFibGVSaWdodENsaWNrKGUpIHsKICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpOwogICAgfQoKICAgIC8vIE92ZXJyaWRpbmcgY29udGV4dCBtZW51IGV2ZW50cwogICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY29udGV4dG1lbnUnLCBlbmFibGVSaWdodENsaWNrLCB0cnVlKTsKCiAgICAvLyBSZW1vdmluZyBpbmxpbmUgb25jb250ZXh0bWVudSBhdHRyaWJ1dGVzCiAgICBmdW5jdGlvbiByZW1vdmVCbG9ja2luZ0F0dHJpYnV0ZXMobm9kZSkgewogICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKCdvbmNvbnRleHRtZW51Jyk7CiAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoJ29uY29weScpOwogICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKCdvbnNlbGVjdHN0YXJ0Jyk7CiAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoJ3Vuc2VsZWN0YWJsZScpOwogICAgICAgIG5vZGUuc3R5bGUudXNlclNlbGVjdCA9ICdhdXRvJzsKICAgICAgICBub2RlLnN0eWxlLndlYmtpdFVzZXJTZWxlY3QgPSAnYXV0byc7CiAgICAgICAgbm9kZS5zdHlsZS5Nb3pVc2VyU2VsZWN0ID0gJ2F1dG8nOwogICAgICAgIG5vZGUuc3R5bGUubXNVc2VyU2VsZWN0ID0gJ2F1dG8nOwogICAgfQoKICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJyonKS5mb3JFYWNoKGZ1bmN0aW9uKG5vZGUpIHsKICAgICAgICByZW1vdmVCbG9ja2luZ0F0dHJpYnV0ZXMobm9kZSk7CiAgICB9KTsKCiAgICAvLyBNdXRhdGlvbiBvYnNlcnZlciB0byBoYW5kbGUgZHluYW1pY2FsbHkgYWRkZWQgZWxlbWVudHMKICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZnVuY3Rpb24obXV0YXRpb25zKSB7CiAgICAgICAgbXV0YXRpb25zLmZvckVhY2goZnVuY3Rpb24obXV0YXRpb24pIHsKICAgICAgICAgICAgbXV0YXRpb24uYWRkZWROb2Rlcy5mb3JFYWNoKGZ1bmN0aW9uKG5vZGUpIHsKICAgICAgICAgICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09PSAxKSB7IC8vIEVsZW1lbnQgbm9kZQogICAgICAgICAgICAgICAgICAgIHJlbW92ZUJsb2NraW5nQXR0cmlidXRlcyhub2RlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICB9KTsKCiAgICBvYnNlcnZlci5vYnNlcnZlKGRvY3VtZW50LCB7CiAgICAgICAgY2hpbGRMaXN0OiB0cnVlLAogICAgICAgIHN1YnRyZWU6IHRydWUKICAgIH0pOwoKICAgIC8vIFZhcmlhYmxlcyBmb3IgZHJhZyBkZXRlY3Rpb24gYW5kIGNvcHlpbmcgdGV4dAogICAgbGV0IHN0YXJ0WCwgc3RhcnRZLCBkcmFnZ2luZyA9IGZhbHNlLCB0YXJnZXRFbGVtZW50ID0gbnVsbDsKCiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBmdW5jdGlvbihldmVudCkgewogICAgICAgIGlmIChldmVudC50YXJnZXQudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnYScgfHwgZXZlbnQudGFyZ2V0LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2J1dHRvbicpIHsKICAgICAgICAgICAgc3RhcnRYID0gZXZlbnQuY2xpZW50WDsKICAgICAgICAgICAgc3RhcnRZID0gZXZlbnQuY2xpZW50WTsKICAgICAgICAgICAgZHJhZ2dpbmcgPSB0cnVlOwogICAgICAgICAgICB0YXJnZXRFbGVtZW50ID0gZXZlbnQudGFyZ2V0OwogICAgICAgIH0KICAgIH0pOwoKICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGZ1bmN0aW9uKGV2ZW50KSB7CiAgICAgICAgaWYgKGRyYWdnaW5nKSB7CiAgICAgICAgICAgIGNvbnN0IGRpc3RhbmNlID0gTWF0aC5zcXJ0KE1hdGgucG93KGV2ZW50LmNsaWVudFggLSBzdGFydFgsIDIpICsgTWF0aC5wb3coZXZlbnQuY2xpZW50WSAtIHN0YXJ0WSwgMikpOwogICAgICAgICAgICBpZiAoZGlzdGFuY2UgPiA1KSB7IC8vIENvbnNpZGVyIGl0IGEgZHJhZyBpZiBtb3ZlZCBtb3JlIHRoYW4gNSBwaXhlbHMKICAgICAgICAgICAgICAgIGlmICh0YXJnZXRFbGVtZW50KSB7CiAgICAgICAgICAgICAgICAgICAgY29uc3QgZWxlbWVudFRleHQgPSB0YXJnZXRFbGVtZW50LnRleHRDb250ZW50LnRyaW0oKTsKICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IuY2xpcGJvYXJkLndyaXRlVGV4dChlbGVtZW50VGV4dCkudGhlbigoKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdUZXh0IGNvcGllZCB0byBjbGlwYm9hcmQ6JywgZWxlbWVudFRleHQpOwogICAgICAgICAgICAgICAgICAgIH0pLmNhdGNoKGVyciA9PiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0NvdWxkIG5vdCBjb3B5IHRleHQ6ICcsIGVycik7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgZHJhZ2dpbmcgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICB0YXJnZXRFbGVtZW50ID0gbnVsbDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0pOwoKICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBmdW5jdGlvbigpIHsKICAgICAgICBkcmFnZ2luZyA9IGZhbHNlOwogICAgICAgIHRhcmdldEVsZW1lbnQgPSBudWxsOwogICAgfSk7CgogICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIGZ1bmN0aW9uKCkgewogICAgICAgIGRyYWdnaW5nID0gZmFsc2U7CiAgICAgICAgdGFyZ2V0RWxlbWVudCA9IG51bGw7CiAgICB9KTsKCiAgICAvLyBSZW1vdmUgYWRkaXRpb25hbCB0ZXh0IGFkZGVkIHRvIGNsaXBib2FyZAogICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY29weScsIGZ1bmN0aW9uKGV2ZW50KSB7CiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7CiAgICAgICAgY29uc3Qgc2VsZWN0aW9uID0gZG9jdW1lbnQuZ2V0U2VsZWN0aW9uKCk7CiAgICAgICAgaWYgKCFzZWxlY3Rpb24ucmFuZ2VDb3VudCkgcmV0dXJuOwogICAgICAgIGNvbnN0IGNvcGllZFRleHQgPSBzZWxlY3Rpb24udG9TdHJpbmcoKS50cmltKCk7CiAgICAgICAgZXZlbnQuY2xpcGJvYXJkRGF0YS5zZXREYXRhKCd0ZXh0L3BsYWluJywgY29waWVkVGV4dCk7CiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsKICAgIH0sIHRydWUpOwoKfSkoKTsK"},{"name":"No Ads - YouTube AdBlocker | Ad Skipper | Free YouTube Music | Ad Remover | Remove Adblock Warning","options":{"check_for_updates":true,"user_modified":null,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"run_in":null,"tags":[],"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["https://*.youtube.com/*","https://www.youtube-nocookie.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_run_in":[],"orig_noframes":null,"orig_tags":[]}},"storage":{"ts":1756027347663,"data":{}},"enabled":false,"position":11,"file_url":"https://update.greasyfork.org/scripts/504197/No%20Ads%20-%20YouTube%20AdBlocker%20%7C%20Ad%20Skipper%20%7C%20Free%20YouTube%20Music%20%7C%20Ad%20Remover%20%7C%20Remove%20Adblock%20Warning.user.js","uuid":"2079db2d-4a06-4f9b-b5ae-545ba0c44e67","source":""},{"name":"youtube-ad-speeder-and-playback-speed-saver","options":{"check_for_updates":true,"user_modified":null,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"run_in":null,"tags":[],"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["*://*.youtube.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_run_in":[],"orig_noframes":null,"orig_tags":[]}},"storage":{"ts":1758143898039,"data":{}},"enabled":false,"position":12,"file_url":"https://update.greasyfork.org/scripts/549837/youtube-ad-speeder-and-playback-speed-saver.user.js","uuid":"f40ff1e2-3304-4ed9-9f0f-525e64ad19d1","source":""}]}